#pragma once

#include <memory>
#include <sstream>
#include <string>
#include <vector>

// clang-format off
#include <glad/gl.h>
#include <GLFW/glfw3.h>
// clang-format on

#include "mmcore/utility/log/Log.h"

#ifdef MEGAMOL_USE_STACKTRACE
#include <boost/stacktrace.hpp>
#endif

namespace megamol::frontend {
static std::string get_message_id_name(GLuint id) {
    if (id == 0x0500) {
        return "GL_INVALID_ENUM";
    }
    if (id == 0x0501) {
        return "GL_INVALID_VALUE";
    }
    if (id == 0x0502) {
        return "GL_INVALID_OPERATION";
    }
    if (id == 0x0503) {
        return "GL_STACK_OVERFLOW";
    }
    if (id == 0x0504) {
        return "GL_STACK_UNDERFLOW";
    }
    if (id == 0x0505) {
        return "GL_OUT_OF_MEMORY";
    }
    if (id == 0x0506) {
        return "GL_INVALID_FRAMEBUFFER_OPERATION";
    }
    if (id == 0x0507) {
        return "GL_CONTEXT_LOST";
    }
    if (id == 0x8031) {
        return "GL_TABLE_TOO_LARGE";
    }

    return std::to_string(id);
}

static void GLAPIENTRY opengl_debug_message_callback(GLenum source, GLenum type, GLuint id, GLenum severity,
    GLsizei length, const GLchar* message, const void* userParam) {
    /* Message Sources
        Source enum                      Generated by
        GL_DEBUG_SOURCE_API              Calls to the OpenGL API
        GL_DEBUG_SOURCE_WINDOW_SYSTEM    Calls to a window - system API
        GL_DEBUG_SOURCE_SHADER_COMPILER  A compiler for a shading language
        GL_DEBUG_SOURCE_THIRD_PARTY      An application associated with OpenGL
        GL_DEBUG_SOURCE_APPLICATION      Generated by the user of this application
        GL_DEBUG_SOURCE_OTHER            Some source that isn't one of these
    */
    /* Message Types
        Type enum                          Meaning
        GL_DEBUG_TYPE_ERROR                An error, typically from the API
        GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR  Some behavior marked deprecated has been used
        GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR   Something has invoked undefined behavior
        GL_DEBUG_TYPE_PORTABILITY          Some functionality the user relies upon is not portable
        GL_DEBUG_TYPE_PERFORMANCE          Code has triggered possible performance issues
        GL_DEBUG_TYPE_MARKER               Command stream annotation
        GL_DEBUG_TYPE_PUSH_GROUP           Group pushing
        GL_DEBUG_TYPE_POP_GROUP            foo
        GL_DEBUG_TYPE_OTHER                Some type that isn't one of these
    */
    /* Message Severity
        Severity enum                    Meaning
        GL_DEBUG_SEVERITY_HIGH           All OpenGL Errors, shader compilation / linking errors, or highly
                                         - dangerous undefined behavior
        GL_DEBUG_SEVERITY_MEDIUM         Major performance warnings, shader compilation / linking
                                         warnings, or the use of deprecated functionality
        GL_DEBUG_SEVERITY_LOW            Redundant state change
                                         performance warning, or unimportant undefined behavior
        GL_DEBUG_SEVERITY_NOTIFICATION   Anything that isn't an
                                         error or performance issue.
    */
    // if (source == GL_DEBUG_SOURCE_API || source == GL_DEBUG_SOURCE_SHADER_COMPILER)
    //    if (type == GL_DEBUG_TYPE_ERROR || type == GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR ||
    //        type == GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR)
    //        if (severity == GL_DEBUG_SEVERITY_HIGH || severity == GL_DEBUG_SEVERITY_MEDIUM)
    //            std::cout << "OpenGL Error: " << message << " (" << get_message_id_name(id) << ")" << std::endl;

    std::string sourceText, typeText, severityText;
    switch (source) {
    case GL_DEBUG_SOURCE_API:
        sourceText = "API";
        break;
    case GL_DEBUG_SOURCE_WINDOW_SYSTEM:
        sourceText = "Window System";
        break;
    case GL_DEBUG_SOURCE_SHADER_COMPILER:
        sourceText = "Shader Compiler";
        break;
    case GL_DEBUG_SOURCE_THIRD_PARTY:
        sourceText = "Third Party";
        break;
    case GL_DEBUG_SOURCE_APPLICATION:
        sourceText = "Application";
        break;
    case GL_DEBUG_SOURCE_OTHER:
        sourceText = "Other";
        break;
    default:
        sourceText = "Unknown";
        break;
    }
    switch (type) {
    case GL_DEBUG_TYPE_ERROR:
        typeText = "Error";
        break;
    case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR:
        typeText = "Deprecated Behavior";
        break;
    case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:
        typeText = "Undefined Behavior";
        break;
    case GL_DEBUG_TYPE_PORTABILITY:
        typeText = "Portability";
        break;
    case GL_DEBUG_TYPE_PERFORMANCE:
        typeText = "Performance";
        break;
    case GL_DEBUG_TYPE_MARKER:
        typeText = "Marker";
        break;
    case GL_DEBUG_TYPE_PUSH_GROUP:
        typeText = "Push Group";
        break;
    case GL_DEBUG_TYPE_POP_GROUP:
        typeText = "Pop Group";
        break;
    case GL_DEBUG_TYPE_OTHER:
        typeText = "Other";
        break;
    default:
        typeText = "Unknown";
        break;
    }
    switch (severity) {
    case GL_DEBUG_SEVERITY_HIGH:
        severityText = "High";
        break;
    case GL_DEBUG_SEVERITY_MEDIUM:
        severityText = "Medium";
        break;
    case GL_DEBUG_SEVERITY_LOW:
        severityText = "Low";
        break;
    case GL_DEBUG_SEVERITY_NOTIFICATION:
        severityText = "Notification";
        break;
    default:
        severityText = "Unknown";
        break;
    }

    std::stringstream output;
    output << "[" << sourceText << " " << severityText << "] (" << typeText << " " << id << " ["
           << get_message_id_name(id) << "]) " << message << std::endl
           << "stack trace:" << std::endl;
#ifdef MEGAMOL_USE_STACKTRACE
    output << boost::stacktrace::stacktrace() << std::endl;
#else
    output << "(disabled)" << std::endl;
#endif

    if (type == GL_DEBUG_TYPE_ERROR) {
        megamol::core::utility::log::Log::DefaultLog.WriteError("%s", output.str().c_str());
    } else if (type == GL_DEBUG_TYPE_OTHER || type == GL_DEBUG_TYPE_MARKER) {
        megamol::core::utility::log::Log::DefaultLog.WriteInfo("%s", output.str().c_str());
    } else {
        megamol::core::utility::log::Log::DefaultLog.WriteWarn("%s", output.str().c_str());
    }
}

void request_opengl(
    int const versionMajor, int const versionMinor, bool const enableKHRDebug, bool const useCoreProfile);

bool load_opengl_functions(int& major, int& minor);

std::vector<std::string> get_extensions(int const major);

void setup_khr_debug();

} // namespace megamol::frontend
